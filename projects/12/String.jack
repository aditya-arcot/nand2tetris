// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int len, max_len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0){
            let str = Array.new(1);
        }
        else {
            let str = Array.new(maxLength);
        }
        let max_len = maxLength;
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(str);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < max_len){
            let str[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0){
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i;
        var boolean neg;

        let val = 0;
        let i = 0;
        let neg = false;
        
        if ((len > 0) & (charAt(0) = 45)){
            let i = 1;
            let neg = true;
        }

        while ((i < len) & (charAt(i) > 47) & (charAt(i) < 57)){
            let val = (val * 10) + String.charDigitVal(charAt(i));
            let i = i + 1;
        }

        if (neg){
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;

        if (val < 0){
            let val = -val;
            do appendChar(45);
        }

        do intToString(val);
        return;
    }

    /** Sets string to hold representation of non-negative int. */
    method void intToString(int val){
        var int quotient, smallest_digit;
        var char ch;

        let quotient = val / 10;
        let smallest_digit = val - (10 * quotient);
        let ch = String.digitCharVal(smallest_digit); // change int to char val

        if (val < 10){
            do appendChar(ch);
            return;
        }
        do intToString(quotient);
        do appendChar(ch);
        return;
    }

    function int charDigitVal(char ch){
        return ch - 48;
    }

    function char digitCharVal(int val) {
        return 48 + val;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
