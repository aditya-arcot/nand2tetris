// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array two_to_the;

    /** Initializes the library. */
    function void init() {
        var int i, val;

        let two_to_the = Array.new(16);
        let i = 0;
        let val = 1;

        while (i < 16) {
            let two_to_the[i] = val;
            let val = val + val;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            return -x;
        }
        return x;
    }

    /** Returns the ith bit of x. */
    function boolean bit(int x, int i){
        return ~((x & two_to_the[i]) = 0);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shifted_x, i;

        let sum = 0;
        let shifted_x = x;
        let i = 0;
        
        while (i < 16){ // 16 bits
            if (Math.bit(y, i)){
                let sum = sum + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, result;
        var boolean neg_x, neg_y;
        
        let neg_x = (x < 0);
        let neg_y = (y < 0);
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) { return 0; }

        let q = Math.divide(x, 2 * y);
        let result = q + q;
        if (~((x - (2 * q * y)) < y)){
            let result = result + 1;
        }

        if (neg_x = neg_y){
            return result;
        }
        return -result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int sqrt, i, tmp, tmp2;

        let sqrt = 0;
        let i = 7; // (16 bits / 2) - 1

        while (i > -1){
            let tmp = sqrt + two_to_the[i];
            let tmp2 = tmp * tmp;
            if ((~(tmp2 > x)) & (tmp2 > 0)){
                let sqrt = tmp;
            }
            let i = i - 1;
        }

        return sqrt;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b){
            return a;
        }
        return b;
    }
}
