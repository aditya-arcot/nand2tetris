class PongGame {
  field int max_screen_x, max_screen_y, border;
  field int title_panel_height, name_panel_height;
  field int msg_row, p1_msg_col, p2_msg_col, paused_col;
  field int name_row, name_col, lives_row, lives_1_col, lives_2_col;
  field int letters_mem_addr;
  field int lives1, lives2;
  field int ball_size;
  field int ball_speed_x, ball_speed_y;
  field int paddle_h, paddle_w;
  field int shift_paddle_pixels;
  field int min_pixel_x, max_pixel_x;
  field int min_pixel_y, max_pixel_y;
  field int center_x, center_y;
  field Ball ball;
  field Paddle paddle1, paddle2;

  constructor PongGame new() {
    // hardcoded values
    let max_screen_x = 511;
    let max_screen_y = 255;
    let border = 15;
    let title_panel_height = 24;
    let name_panel_height = 15;

    let msg_row = 12;
    let p1_msg_col = (32-8)-10;
    let p2_msg_col = 32+10;
    let paused_col = 29;
    let name_row = 22;
    let name_col = 26;
    let lives_row = 1;
    let lives_1_col = 10;
    let lives_2_col = 53;
    let letters_mem_addr = 16384 + 142; // 4 pixel rows blanks

    let lives1 = 3;
    let lives2 = 3;

    let ball_size = 3;
    let ball_speed_x = 1; // TODO change to random
    let ball_speed_y = 1; // TODO change to random

    let paddle_h = 50;
    let paddle_w = 10;
    let shift_paddle_pixels = 10;

    // derivations
    let min_pixel_x = border;
    let max_pixel_x = max_screen_x - border;
    let min_pixel_y = title_panel_height + border;
    let max_pixel_y = (max_screen_y - border) - name_panel_height;

    let center_x = (min_pixel_x + max_pixel_x) / 2;
    let center_y = (min_pixel_y + max_pixel_y) / 2;

    // objects, drawing
    do drawBoard();
    do createObjects();
    do drawInfo();

    return this;
  }

  method void drawInfo() {
    do drawLetters();
    do Output.moveCursor(name_row, name_col);
    do Output.printString("Aditya Arcot");
    return;
  }

  method void drawLetters() {
    do drawP(letters_mem_addr);
    do drawO(letters_mem_addr + 1);
    do drawN(letters_mem_addr + 2);
    do drawG(letters_mem_addr + 3);
    return;
  }

  method void drawP(int memAddress) {
    do Memory.poke(memAddress+0, 8188);
    do Memory.poke(memAddress+32, 8188);
    do Memory.poke(memAddress+64, 6156);
    do Memory.poke(memAddress+96, 6156);
    do Memory.poke(memAddress+128, 6156);
    do Memory.poke(memAddress+160, 6156);
    do Memory.poke(memAddress+192, 6156);
    do Memory.poke(memAddress+224, 8188);
    do Memory.poke(memAddress+256, 8188);
    do Memory.poke(memAddress+288, 12);
    do Memory.poke(memAddress+320, 12);
    do Memory.poke(memAddress+352, 12);
    do Memory.poke(memAddress+384, 12);
    do Memory.poke(memAddress+416, 12);
    do Memory.poke(memAddress+448, 12);
    do Memory.poke(memAddress+480, 12);

    return;
  }

  method void drawO(int memAddress) {
    do Memory.poke(memAddress+0, 8188);
    do Memory.poke(memAddress+32, 8188);
    do Memory.poke(memAddress+64, 6156);
    do Memory.poke(memAddress+96, 6156);
    do Memory.poke(memAddress+128, 6156);
    do Memory.poke(memAddress+160, 6156);
    do Memory.poke(memAddress+192, 6156);
    do Memory.poke(memAddress+224, 6156);
    do Memory.poke(memAddress+256, 6156);
    do Memory.poke(memAddress+288, 6156);
    do Memory.poke(memAddress+320, 6156);
    do Memory.poke(memAddress+352, 6156);
    do Memory.poke(memAddress+384, 6156);
    do Memory.poke(memAddress+416, 6156);
    do Memory.poke(memAddress+448, 8188);
    do Memory.poke(memAddress+480, 8188);
    return;
  }

  method void drawN(int memAddress) {
    do Memory.poke(memAddress+0, 6204);
    do Memory.poke(memAddress+32, 6268);
    do Memory.poke(memAddress+64, 6252);
    do Memory.poke(memAddress+96, 6252);
    do Memory.poke(memAddress+128, 6252);
    do Memory.poke(memAddress+160, 6380);
    do Memory.poke(memAddress+192, 6348);
    do Memory.poke(memAddress+224, 6348);
    do Memory.poke(memAddress+256, 6540);
    do Memory.poke(memAddress+288, 6540);
    do Memory.poke(memAddress+320, 7052);
    do Memory.poke(memAddress+352, 6924);
    do Memory.poke(memAddress+384, 6924);
    do Memory.poke(memAddress+416, 6924);
    do Memory.poke(memAddress+448, 7948);
    do Memory.poke(memAddress+480, 7692);
    return;
  }

  method void drawG(int memAddress) {
    do Memory.poke(memAddress+0, 8188);
    do Memory.poke(memAddress+32, 8188);
    do Memory.poke(memAddress+64, 6156);
    do Memory.poke(memAddress+96, 6156);
    do Memory.poke(memAddress+128, 12);
    do Memory.poke(memAddress+160, 12);
    do Memory.poke(memAddress+192, 12);
    do Memory.poke(memAddress+224, 12);
    do Memory.poke(memAddress+256, 8076);
    do Memory.poke(memAddress+288, 8076);
    do Memory.poke(memAddress+320, 6156);
    do Memory.poke(memAddress+352, 6156);
    do Memory.poke(memAddress+384, 6156);
    do Memory.poke(memAddress+416, 6156);
    do Memory.poke(memAddress+448, 8188);
    do Memory.poke(memAddress+480, 8188);
    return;
  }

  method void drawBoard() {
    do Screen.clearScreen();
    do Screen.setColor(true);
    do Screen.drawRectangle(0, 0, max_screen_x, max_screen_y);
    do Screen.setColor(false);
    do Screen.drawRectangle(min_pixel_x, min_pixel_y, max_pixel_x, max_pixel_y);
    do Screen.drawRectangle(0, 0, max_screen_x, title_panel_height - 1);
    do Screen.drawRectangle(0, max_pixel_y + border + 1, max_screen_x, max_screen_y);
    do Screen.drawLine(min_pixel_x - 1, min_pixel_y - 1, min_pixel_x - 1, max_pixel_y + 1);
    do Screen.drawLine(max_pixel_x + 1, min_pixel_y - 1, max_pixel_x + 1, max_pixel_y + 1);
    do Screen.drawLine(min_pixel_x - 1, min_pixel_y - 1, max_pixel_x + 1, min_pixel_y - 1);
    do Screen.drawLine(min_pixel_x - 1, max_pixel_y + 1, max_pixel_x + 1, max_pixel_y + 1);
    do drawCenterLines();
    return;
  }

  method void drawCenterLines() {
    do Screen.setColor(true);
    do Screen.drawLine(center_x-1, min_pixel_y, center_x-1, max_pixel_y);
    do Screen.drawLine(center_x+1, min_pixel_y, center_x+1, max_pixel_y);
    return;
  }

  method void drawLives() {
    do Output.moveCursor(lives_row, lives_1_col);
    do Output.printInt(lives1);
    do Output.moveCursor(lives_row, lives_2_col);
    do Output.printInt(lives2);
    return;
  }

  method void createObjects() {
    let ball = Ball.new(center_x, center_y, ball_size, ball_speed_x, ball_speed_y);
    let paddle1 = Paddle.new(min_pixel_x, center_y-(paddle_h/2),
                    min_pixel_x+(paddle_w-1), center_y+(paddle_h/2),
                    shift_paddle_pixels, min_pixel_y, max_pixel_y);
    let paddle2 = Paddle.new(max_pixel_x-(paddle_w-1), center_y-(paddle_h/2),
                    max_pixel_x, center_y+(paddle_h/2),
                    shift_paddle_pixels, min_pixel_y, max_pixel_y);
    return;
  }

  method void restart() {
    do ball.eraseOld();
    do ball.dispose();
    do paddle1.erase();
    do paddle1.dispose();
    do paddle2.erase();
    do paddle2.dispose();

    do drawBoard();
    do createObjects();
    do drawInfo();

    do Sys.wait(1000);

    return;
  }

  method void dispose() {
    do ball.dispose();
    do paddle1.dispose();
    do paddle2.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void run() {
    var boolean game_over;

    while (~game_over) {
      let game_over = checkKey();

      do ball.move();
      if (~checkCollisions()) { do restart(); }
      else {
        do ball.eraseOld();
        do ball.draw();
      }

      do drawCenterLines();
      do drawLives();

      if (~game_over) { let game_over = checkGameOver(); }

      do Sys.wait(25);
    }

    if (lives1 = lives2) {
      do tie();
      return;
    }
    if (lives2 = 0) {
      do player1Win();
    }
    do player2Win();

    return;
  }

  method boolean checkKey() {
    var char key;
    let key = Keyboard.keyPressed();

    // TODO remove
    // for debugging
    do Screen.setColor(false);
    do Screen.drawRectangle(0, 0, 25, 15);
    do Output.moveCursor(0, 0);
    do Output.printInt(key);

    if (key = 131) {do paddle2.moveUp(); return false; }
    if (key = 133) { do paddle2.moveDown(); return false; }
    if (key = 87) { do paddle1.moveUp(); return false; }
    if (key = 83) { do paddle1.moveDown(); return false; }

    if (key = 80) { do pause(); return false; }
    if (key = 81) { return true; }
    if (key = 82) { 
      // TODO restart 
    }

    return false;
  }

  method void pause() {
    var char key;
    let key = Keyboard.keyPressed();

    while (key = 80){
      do Sys.wait(100);
      let key = Keyboard.keyPressed();
    }

    do Output.moveCursor(msg_row, paused_col);
    do Output.printString("Paused");

    while (~(key = 80)){
      do Sys.wait(10);
      let key = Keyboard.keyPressed();
    }

    while (key = 80){
      do Sys.wait(10);
      let key = Keyboard.keyPressed();
    }

    do drawBoard();
    do drawInfo();

    return;
  }

  method void player1Win() {
    do Output.moveCursor(msg_row, p1_msg_col);
    do Output.printString("You win!");
    do Output.moveCursor(msg_row, p2_msg_col);
    do Output.printString("You lose");
    return;
  }

  method void player2Win() {
    do Output.moveCursor(msg_row, p1_msg_col);
    do Output.printString("You lose");
    do Output.moveCursor(msg_row, p2_msg_col);
    do Output.printString("You win!");
    return;
  }

  method void tie() {
    do Output.moveCursor(msg_row, p1_msg_col);
    do Output.printString("You tied");
    do Output.moveCursor(msg_row, p2_msg_col);
    do Output.printString("You tied");
    return;
  }

  method boolean checkCollisions() {
    if (~sideCollisions()) { return false; }
    do ceilingFloorCollisions();
    do paddleCollisions();
    return true;
  }

  method boolean sideCollisions() {
    var int x;
    let x = ball.getX();
    if ((x - ball_size) < min_pixel_x) {
      do decrementPlayer(1);
      return false;
    }
    if ((x + ball_size) > max_pixel_x) {
      do decrementPlayer(2);
      return false;
    }
    return true;
  }

  method void ceilingFloorCollisions() {
    var int y, y_speed;
    let y = ball.getY();
    let y_speed = ball.getY_speed();

    if ((y - ball_size) < min_pixel_y) {
      do ball.setY(min_pixel_y + ball_size);
      do ball.setY_speed(-y_speed);
      return;
    }
    if ((y + ball_size) > max_pixel_y) {
      do ball.setY(max_pixel_y - ball_size);
      do ball.setY_speed(-y_speed);
    }
    return;
  }

  method void paddleCollisions() {
    var int x, y, paddle_x;
    var boolean left_side;

    let x = ball.getX();
    let y = ball.getY();
    let left_side = (x < center_x);

    do paddle1.draw();
    do paddle2.draw();

    if (left_side) {
      let paddle_x = paddle1.getX2();
      if ((x - ball_size) < paddle_x){
        if ((y < paddle1.getY()) | (y > paddle1.getY2())){
          return;
        }
        do ball.setX(paddle_x + ball_size);
        do ball.setX_speed(-ball.getX_speed());
        do ball.incrementSpeeds();
      }
      return;
    }

    let paddle_x = paddle2.getX();
    if ((x + ball_size) > paddle_x) {
      if ((y < paddle2.getY()) | (y > paddle2.getY2())){
        return;
      }
      do ball.setX(paddle_x - ball_size);
      do ball.setX_speed(-ball.getX_speed());
      do ball.incrementSpeeds();
    }
    return;
  }

  method void decrementPlayer(int player) {
    if (player = 1){
      let lives1 = lives1 - 1;
      return;
    }
    let lives2 = lives2 - 1;
    return;
  }

  method boolean checkGameOver() {
    if (lives1 = 0) { return true; }
    if (lives2 = 0) { return true; }
    return false;
  }
}
