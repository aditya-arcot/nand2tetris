class Paddle {
  field int x, y; // top left
  field int x2, y2; // bottom right
  field int y_diff;
  field int shift_pixels;
  field int min_pixel_y, max_pixel_y;

  constructor Paddle new(int X, int Y, int X2, int Y2, int Shift_pixels,
                          int Min_pixel_y, int Max_pixel_y) {
    let x = X;
    let y = Y;
    let x2 = X2;
    let y2 = Y2;
    let y_diff = y2-y;
    let shift_pixels = Shift_pixels;
    let min_pixel_y = Min_pixel_y;
    let max_pixel_y = Max_pixel_y;
    do draw();
    return this;
  }

  method int getX() { return x; }
  method int getY() { return y; }
  method int getX2() { return x2; }
  method int getY2() { return y2; }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  method void draw() {
    do Screen.setColor(true);
    do Screen.drawRectangle(x, y, x2, y2);
    return;
  }

  method void erase() {
    do Screen.setColor(false);
    do Screen.drawRectangle(x, y, x2, y2);
    return;
  }

  method void moveDown() {
    if (y2 = max_pixel_y) { return; }
    if ((y2 + shift_pixels) > max_pixel_y) {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x2, y+((max_pixel_y-y2)-1));
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y2 + 1, x2, max_pixel_y);
      let y2 = max_pixel_y;
      let y = y2 - y_diff;
    }
    else {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x2, y+(shift_pixels-1));
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y2 + 1, x2, y2 + shift_pixels);
      let y = y + shift_pixels;
      let y2 = y2 + shift_pixels;
    }
    return;
  }

  method void moveUp() {
    if (y = min_pixel_y) { return; }
    if ((y - shift_pixels) < min_pixel_y) {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y2-((y-min_pixel_y)-1), x2, y2);
      do Screen.setColor(true);
      do Screen.drawRectangle(x, min_pixel_y, x2, y2 - 1);
      let y = min_pixel_y;
      let y2 = y + y_diff;
    }
    else {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y2-(shift_pixels-1), x2, y2);
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y - shift_pixels, x2, y-1);
      let y = y - shift_pixels;
      let y2 = y2 - shift_pixels;
    }
    return;
  }


}
