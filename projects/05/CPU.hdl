// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


    PARTS:

    // Input
        Not16(in=instruction, out[15]=Not-op-code, out[12]=Not-a, out[11]=Not-c1, out[10]=Not-c2,
              out[9]=Not-c3, out[8]=Not-c4, out[7]=Not-c5, out[6]=Not-c6, out[5]=Not-d1,
              out[4]=Not-d2, out[3]=Not-d3, out[2]=Not-j1, out[1]=Not-j2, out[0]=Not-j3);


        Not(in=Not-op-code, out=op-code);   // 0 for A instruction, 1 for C
        Not(in=Not-a, out=a);               // 0 for A, 1 for M
        Not(in=Not-c1, out=c1);             // zx
        Not(in=Not-c2, out=c2);             // nx
        Not(in=Not-c3, out=c3);             // zy
        Not(in=Not-c4, out=c4);             // ny
        Not(in=Not-c5, out=c5);             // f
        Not(in=Not-c6, out=c6);             // no
        Not(in=Not-d1, out=d1);             // store in A
        Not(in=Not-d2, out=d2);             // store in D
        Not(in=Not-d3, out=d3);             // store in M
        Not(in=Not-j1, out=j1);             // jump if neg
        Not(in=Not-j2, out=j2);             // jump if 0
        Not(in=Not-j3, out=j3);             // jump if pos



    // Multiplexers
        // choose ALU for C instruction, address for A instruction
        Mux16(a=ALU-out, b=instruction, sel=Not-op-code, out=ALU-addr-Mux-out);


        // use M register value if C instruction and a == 1
        // else use A register value
        And(a=op-code, b=a, out=C-instruction-And-a);
        Mux16(a=A-Reg-out, b=inM, sel=C-instruction-And-a, out=A-Reg-M-Reg-Mux-out);



    // Registers
        // A instruction
        //    always store
        // C instruction
        //    store if d1 == 1
        Or(a=Not-op-code, b=d1, out=store-A-Reg);
        ARegister(in=ALU-addr-Mux-out, load=store-A-Reg, out=A-Reg-out, out[0..14]=addressM);


        // store if C instruction and d2 == 1
        And(a=op-code, b=d2, out=store-D-Reg);
        DRegister(in=ALU-out, load=store-D-Reg, out=D-Reg-out);


        // write to M register if C instruction and d3 == 1
        And(a=op-code, b=d3, out=writeM);



    // ALU
        ALU(x=D-Reg-out, y=A-Reg-M-Reg-Mux-out, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
            out=ALU-out, out=outM, zr=zr, ng=ng);



    // PC
        // jump if neg and is neg
        And(a=j1, b=ng, out=neg-jump);

        // jump if 0 and is 0
        And(a=j2, b=zr, out=zr-jump);

        // jump if pos and is pos
        // pos == Not (neg Or zero)
        Or(a=ng, b=zr, out=neg-or-zr);
        Not(in=neg-or-zr, out=pos);
        And(a=j3, b=pos, out=pos-jump);

        // jump if any of 3 above conditions
        Or(a=neg-jump, b=zr-jump, out=temp1);
        Or(a=pos-jump, b=temp1, out=temp2);

        // if A instruction, jump = 0
        And(a=temp2, b=op-code, out=jump);

        // if reset, set line to 0
        // else if load == 1, jump
        // else increment
        PC(in=A-Reg-out, load=jump, inc=true, reset=reset, out[0..14]=pc);

}
