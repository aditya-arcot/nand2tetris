2 ways to express same semantics
- binary code
  - can be directly executed
- symbolic language
  - must be translated (by assembler) before execution


== A-instruction ==
semantics - set A register to value

symbolic syntax - @value
binary syntax - 0value
- 0 is op code
- value is 15-bit binary number

example - set A register to 21
- @21
- 0000000000010101
==========


== C-instruction ==
symbolic syntax - dest = comp; jump
binary syntax - 1 1 1 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
- 1 is op code
- bit 2, 3 not used
- next 7 bits are comp bits
- next 3 bits are dest bits
- last 3 bits are jump bits

see translation tables to convert from symbolic to binary

ex: 1111010101101100 -> AM=D|M;JLT
==========


== Hack program ==
sequence of Hack instructions
either symbolic or binary
white space permitted
comments can be used
==========
