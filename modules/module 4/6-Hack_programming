Hack assembly language

CPU emulator can be used for debugging, executing

== typical registers, memory operations ==
// D=10
@10
D=A

// D++
D=D+1

// D=RAM[17]
@17
D=M

// RAM[17]=0
@17
M=0

// RAM[17]=10
@10
D=A
@17
M=D

// RAM[5] = RAM[3]
@3
D=M
@5
M=D
==========


== terminating a program properly ==
infinite loop
- @N // use current line num
- 0; JMP // always jump

prevent NOP slide
==========


== built-in symbols ==
virtual registers
- use when A register is used as address to improve readability
- R0, R1, ... R15 - correspond to 0, 1, ... 15

base addresses of I/O memory maps
- SCREEN -> 16384
- KBD -> 24576

used in implementation of Hack virtual machine
- SP -> 0
- LCL -> 1
- ARG -> 2
- THIS -> 3
- THAT -> 4
==========


== labels ==
declaration - (LABELNAME)
referencing - @LABELNAME

assembler operations
- declarations not translated
- each reference to label replaced with reference to instruction number following label's declaration
==========


== variables ==
declaration - @varname
- looks same as label reference, but no corresponding label declaration

type - 16-bit value
allocated to RAM from address 16 onwards

semantics
- for declaration, system finds available memory register (n)
- in future references, @varname translated to @n

benefits
- readability, easy to debug
- relocatable code
  - avoids explicit memory locations
==========


== pointers ==
variables that store memory addresses

to access memory using a pointer, we need an instruction like A=M
- explicit setting of A-register

arrays
- stored as continuous block of registers in memory
- pointer needed for beginning of array
==========



