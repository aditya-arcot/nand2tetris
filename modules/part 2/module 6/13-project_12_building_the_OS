OS abstraction - specified by Jack OS API

OS implementations
- VM emulator - contains built-in OS implementation (Java)
- nand2tetris/tools/os - OS implementation (Jack)
- your implementation - project 12


== reverse engineering ==
suppose you wish to implement existing OS
OS consists of n executable modules, with high inter-dependency

strategy
- for each module in OS implement module separately
- use remaining n-1 executable modules to service it

example
- suppose we want to develop OS class Screen and test using Main.jack
- steps
  - put files Screen.jack and Main.jack in some directory
  - compile directory
  - execute directory in VM emulator (will use user implementation of Screen)
==========


stub files supplied for each OS class
- all subroutine declarations, including non-API subroutines


== project 12 ==
Screen, Output, String, Keyboard, Sys
- develop/test separately, using supplied Main.jack programs

Memory, Array, Math
- develop/test separately, using .jack, .tst, .cmp files

can be developed in any order

final test
- run Pong with compiled project 12 .vm files
==========

