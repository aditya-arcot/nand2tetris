challenge - translate while, if, let, do, return to goto, if-goto, label


== compiling if statements ==
- source code -
if (expression)
  statements1
else
  statements2
...

- VM code -
  compiled (expression)
  not			// negating makes implementation easier
  if-goto L1
  compiled (statements1)
  goto L2
label L1
  compiled (statements2)
label L2
...

unique labels generated by compiler
==========


== compiling while statements ==
- source code -
while (expression)
  statements
...

-VM code -
label L1
  compiled (expression)
  not
  if-goto L2
  compiled (statements)
  goto L1
label L2
...
==========


== complications ==
multiple if, while statements
- compiler must generate unique labels

nested if, while
- compiler already employs recursive compilation strategy
==========


so far, we know how to compile variables, expressions, flow of control
- enough to write a compiler for simple procedural language

