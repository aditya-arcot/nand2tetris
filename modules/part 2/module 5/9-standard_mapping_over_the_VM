== files and subroutines mapping ==
filename.jack -> fileName.vm

subName in fileName.jack -> VM function fileName.subName

constructor/function with k args -> VM function that operates on k args

method with k args -> VM function that operates on k+1 args
==========


== variables mapping ==
local vars -> local segment

arg vars -> arg segment

static vars -> static segment of current .vm class file

field vars
- assumption - pointer 0 has been set to this object
- ith field -> this i
==========


== arrays mapping ==
accessing arr[i]
- set pointer 1 to arr+i
- access entry by accessing this 0
==========


== compiling subroutines ==
method
- compiled VM code must set base of this segment to arg 0

constructor
- compiled VM code must allocate memory block for new object, then set base of segment this to new object base addr
- compiled VM code must return object base addr to caller
  - already done on Jack level

void function / method
- compiled VM code must return value constant 0
==========


== compiling subroutine calls ==
caller must push args onto stack, then call subroutine

method
- caller must first push reference to object on which method is supposed to operate
- next, caller must push arg1, arg2, then call method

void
- does not return value at Jack level
- must return dummy value at VM level
- caller must pop and ignore returned value
==========


== compiling constants ==
null - constant 0
false - constant 0
true - constant -1
- push 1, neg
==========


== OS classes and subroutines ==
basic Jack OS implemented as set of 8 compiled VM class files

all OS class files must reside in same directory as VM files generated by compiler

any VM function can call any OS VM function for its effect
==========


== special OS services ==
multiplication - Math.multiply()
division - Math.divide()
string constants - String.new(length)
string assignments - series of calls to String.appendChar(c)
object construction - Memory.alloc(size)
object recycling - Memory.deAlloc(object)
==========

